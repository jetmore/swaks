
00000 - basic send
    0 happy path
    1 RCPT single recip (failed)
    2 RCPT multiple recips (success)
    3 RCPT multiple recips (mixed success)
    4 RCPT multiple recips (all failed)
   10 MAIL rejected
   50 --pipeline success
   51 --pipeline MAIL failure
   52 --pipeline RCPT failure
   53 --pipeline DATA failure
   54 --pipeline multiple RCPT: accept accept
   55 --pipeline multiple RCPT: accept   fail
   56 --pipeline multiple RCPT:   fail   fail
   60 --cc gets added to envelope recipients
   61 --bcc gets added to envelope recipients
   62 --to, --cc, --bcc all work together
   63 --to, --cc, --bcc use a consistent order regardless of order options are presented

00200 - tls
    0 --tls success
    1 --tls fail (not advertised)
    2 --tls fail (something protocol related, not sure what yet) (NOTE THAT WE JUST EXIT, NOT QUIT - IS THAT CORRECT?)
    3 --tls --tls-optional unadvertised (should succeed)
    4 --tls --tls-optional protocol-failure  (should succeed - sort of.  If the server can't hack it, that's not our problem)
    5 --tls --tls-optional-strict unadvertised (should succeed)
    6 --tls --tls-optional-strict protocol-failure (should fail)
    7 --tls-on-connect success
    8 --tls-on-connect failure
   10 --tls-cert --tls-key
   11 --tls-ca-path using file
   12 --tls-ca-path using directory
   13 --tls-get-peer-cert (STDOUT)
   14 --tls-get-peer-cert (FILE)
   15 --tls-protocol TLSv1_1 (if the option didn't work, one of 15 and 16 would fail)
   16 --tls-protocol TLSv1_2 (if the option didn't work, one of 15 and 16 would fail)
   17 --tls STARTTLS rejected (should fail)
   18 --tls --tls-optional STARTTLS rejected (should succeed)
   19 --tls --tls-optional-strict STARTTLS rejected (should fail)
   20 --tls-cipher ECDHE-ECDSA-AES256-GCM-SHA384 (if the option didn't work, one of 20 and 21 would fail)
   21 --tls-cipher AES256-GCM-SHA384 (if the option didn't work, one of 20 and 21 would fail)
   22 --tls-sni (would like a smtp-server.pl method that prints the SNI to confirm it was sent)
   23 TLS client certificate info line -- client certs NOT present, server does NOT request them
   24 TLS client certificate info line -- client certs NOT present, server DOES     request them
   25 TLS client certificate info line -- client certs ARE present, server DOES     request them
   26 TLS client certificate info line -- client certs ARE present, server does NOT request them
   40 TLS verification info line: --fail ca (unsigned cert),           --fail host (pipe - no target host)
   41 TLS verification info line: --fail ca (signed but unknown cert), --fail host (pipe - no target host)
   42 TLS verification info line: ++pass ca (signed and known cert),   --fail host (pipe - no target host)
   43 TLS verification info line: --fail ca (unsigned cert),           --fail host (socket - no target host)
   44 TLS verification info line: --fail ca (unsigned cert),           --fail host (inet - host doesn't match cert)
   45 TLS verification info line: --fail ca (unsigned cert),           ++pass host (inet - host (localhost) DOES match cert (ipv4))
   46 TLS verification info line: --fail ca (unsigned cert),           ++pass host (inet - host (127.0.0.1) DOES match cert (ipv4))
   47 TLS verification info line: --fail ca (unsigned cert),           --fail host (--tls-verify-target using hostname not in cert)
   48 TLS verification info line: --fail ca (unsigned cert),           ++pass host (--tls-verify-target using hostname in cert)
   49 TLS verification info line: --fail ca (unsigned cert),           --fail host (--tls-verify-target using IP not in cert (ipv4))
   50 TLS verification info line: --fail ca (unsigned cert),           ++pass host (--tls-verify-target using IP in cert (ipv4))
   51 TLS verification info line: --fail ca (unsigned cert),           ++pass host (hostname     in cert CN,     NOT in SAN)
   52 TLS verification info line: --fail ca (unsigned cert),           ++pass host (hostname NOT in cert CN,         in SAN)
   53 TLS verification info line: --fail ca (unsigned cert),           ++pass host (wildcard hostname in cert)
   54 TLS verification info line: ++pass ca,                           ++pass host (socket, using --tls-verify-target)
   #55 TLS verification info line: --fail ca (signed but expired cert), --fail host (pipe - no target host)
   56 TLS verification info line: --fail ca (unsigned cert),           ++pass host (hostname in list of multiple SANs)
   57 TLS verification info line: --fail ca (unsigned cert),           ++pass host (inet - host (localhost) DOES match cert (ipv6))
   58 TLS verification info line: --fail ca (unsigned cert),           ++pass host (inet - host (::1) DOES match cert (ipv6))
   60 --tls-verify-ca   FAIL (bad  ca, bad  host)
   61 --tls-verify-ca   FAIL (bad  ca, good host)
   62 --tls-verify-ca   PASS (good ca, bad  host)
   63 --tls-verify-ca   PASS (good ca, good host)
   64 --tls-verify-host FAIL (bad  ca, bad  host)
   65 --tls-verify-host PASS (bad  ca, good host)
   66 --tls-verify-host FAIL (good ca, bad  host)
   67 --tls-verify-host PASS (good ca, good host)
   68 --tls-verify      FAIL (bad  ca, bad  host)
   69 --tls-verify      FAIL (bad  ca, good host)
   70 --tls-verify      FAIL (good ca, bad  host)
   71 --tls-verify      PASS (good ca, good host)
   72 --tls-verify-ca   FAIL (bad  ca, NO  host) (the point of this test is because the "no host" error shown when tls negotiation fails is unique)
   73 --tls-verify-ca   FAIL (bad  ca, PRESENT BUT INCORRECT  host) (ensure the version of the failure message which includes the hostname)


00300 - xclient (COMPLETE)
    0 happy path
    1 --xclient-delim
    2 --xclient-delim at beginning, end, consecutive are noops
    3 --xclient
    4 --xclient mixed with --xclient-SPECIFIC
    5 --xclient, --xclient-SPECIFIC, --xclient-delim
    6 --xclient allows invalid SPECIFIC
    7 --xclient allows unadvertised SPECIFIC
    8 --xclient-SPECIFIC fails when SPECIFIC isn't available
    9 --xclient-no-verify allows --xclient-SPECIFIC to work even when SPECIFIC isn't available
   10 --xclient + --tls
   11 --xclient-before-starttls + --xclient + --tls
   12 --xclient not advertised
   13 --xclient not advertised --xclient-optional
   14 --xclient not advertised --xclient-optional-strict
   15 --xclient failed
   16 --xclient failed --xclient-optional
   17 --xclient failed --xclient-optional-strict
#   18 --xclient --pipeline success - it's unclear to me the practical purpose of using xclient with pipelining, or how to really test
#   19 --xclient --pipeline failure
   20 --xclient-SPECIFIC fails when SPECIFIC isn't available (multiple SPECIFICS)

00500 - prdr (COMPLETE)
    0 happy path - 3 addrs, 3 accepts
    1 accept accept   fail (all fails post-PRDR)
    2 accept   fail accept (all fails post-PRDR)
    3 accept   fail   fail (all fails post-PRDR)
    4   fail accept accept (all fails post-PRDR)
    5   fail accept   fail (all fails post-PRDR)
    6   fail   fail accept (all fails post-PRDR)
    7   fail   fail   fail (all fails post-PRDR)
   10 accept   fail        (fail is in rcpt)     (message downscales to non-PRDR if only one accepted recipient)
   11 accept                                     (message downscales to non-PRDR if only one accepted recipient)
   12   fail                                     (message downscales to non-PRDR if no accepted recipients)
   13 accept   fail accept (fail is in rcpt)     (note the rcpt-failed address isn't shown at all for prdr)
   14 fail-prdr   fail-rcpt  accept


00600 - auth
    0 PLAIN success
    1 LOGIN success
    2 CRAM-MD5 success
    3 CRAM-SHA1 success
##    4 DIGEST-MD5 success
    5 NTLM success
   10 PLAIN failed
   11 LOGIN failed
   12 CRAM-MD5 failed
   13 CRAM-SHA1 failure
#   14 DIGEST-MD5 failure
   15 NTLM failure
   20 --auth -> choose protocol (this relies on the fact that CRAM-MD5 is tried first in the code)
   21 --auth not advertised
   22 --auth not advertised --auth-optional
   23 --auth-not-advertised --auth-optional-strict
   24 --auth failed --auth-optional
   25 --auth failed --auth-optional-strict
   26 --auth pulls capabilities from second EHLO when --tls is used
#   27 --auth-extra domain DIGEST-MD5
#   28 --auth-extra realm DIGEST-MD5
#   29 --auth-extra dmd5-serv-type DIGEST-MD5
#   30 --auth-extra dmd5-host DIGEST-MD5
#   31 --auth-extra dmd5-serv-name DIGEST-MD5
##   32 --auth-extra domain NTLM - leave off for now, doesn't seem to get sent even when we specify it, either a library or protocol issue
##   33 --auth-extra realm NTLM - leave off for now, doesn't seem to get sent even when we specify it, either a library or protocol issue
   34 --auth-map
   35 --auth-plaintext
   36 --auth-hide-password
   37 --auth-plaintext --auth-hide-password

00800 - proxy
    0 v1 (implicit), --proxy-*, success
    1 v1 (explicit), --proxy, success
    2 v2, --proxy-*, success
    3 v2, --proxy, success
    4 proxy + tls-on-connect (note I couldn't get this to work over pipe, suspect issue w/ smtp-server.pl)




05000 - misc stuff

05000 - --quit-after
    0 --quit-after connect
    1 --quit-after xclient
    2 --quit-after tls (with --tls)
    3 --quit-after tls (with --tls-on-connect) ## This sends QUIT out of sync with the protocol but I think it's ok.  Either use --drop-after to not care about the protocol, or use `--tlsc --quit-after connect` to be in sync
    4 --quit-after helo
    5 --quit-after auth
    6 --quit-after mail
    7 --quit-after rcpt
    8 --quit-after xclient (not using xclient)
    9 --quit-after first-helo (without --tls)
   10 --quit-after first-helo (with --tls)
   11 --quit-after tls (nt using tls)
   12 --quit-after helo (with --tls)
   13 --quit-after xclient-helo (with --xclient)
   14 --quit-after auth (not using auth)
   17 --quit-after xclient-helo (without --xclient)
   18 --quit-after proxy (with --proxy)
   19 --quit-after proxy (without --proxy)

05100 - --drop-after
  100 --drop-after connect
    1 --drop-after xclient
    2 --drop-after tls (with --tls)
    3 --drop-after tls (with --tls-on-connect)
    4 --drop-after helo
    5 --drop-after auth
    6 --drop-after mail
    7 --drop-after rcpt
    8 --drop-after xclient (not using xclient)
    9 --drop-after first-helo (without --tls)
   10 --drop-after first-helo (with --tls)
   11 --drop-after tls (nt using tls)
   12 --drop-after helo (with --tls)
   13 --drop-after xclient-helo (with --xclient)
   14 --drop-after auth (not using auth)
   15 --drop-after data
   16 --drop-after dot
   17 --drop-after xclient-helo (without --xclient)
   18 --drop-after proxy (with --proxy)
   19 --drop-after proxy (without --proxy)

05200 - --drop-after-send
  200 --drop-after-send connect
    1 --drop-after-send xclient - pending figuring out the right server actions for xclient
    2 --drop-after-send tls (with --tls)
    3 --drop-after-send tls (with --tls-on-connect)
    4 --drop-after-send helo
    5 --drop-after-send auth
    6 --drop-after-send mail
    7 --drop-after-send rcpt
    8 --drop-after-send xclient (not using xclient)
    9 --drop-after-send first-helo (without --tls)
   10 --drop-after-send first-helo (with --tls)
   11 --drop-after-send tls (nt using tls)
   12 --drop-after-send helo (with --tls)
   13 --drop-after-send xclient-helo (with --xclient)
   14 --drop-after-send auth (not using auth)
   15 --drop-after-send data
   16 --drop-after-send dot
   17 --drop-after-send xclient-helo (without --xclient)
   18 --drop-after-send proxy (with --proxy)
   19 --drop-after-send proxy (without --proxy)
helo with --xclient and --xclient-before-starttls

05300 - output options
    0 --suppress-data
    1 --show-time-lapse
    2 --show-time-lapse i
    3 --no-info-hints
    4 --no-send-hints
    5 --no-receive-hints
    6 --no-hints
    7 --show-raw-text
    8 --hide-receive
    9 --hide-send
   10 --hide-informational
   11 --hide-all
   12 --silent   (no errors)
   13 --silent   (errors)
   14 --silent 1 (errors)
   15 --silent 2 (errors)
   16 --silent 3 (errors)

# this needs fleshing out with failures (what if the local interface doesn't exist.  What if nothing's listing at the server or port? What about IPv6?) but it's
# finicky so I'm just getting the happy path for now
06000 - tcp specific
    0 --server --port (127.0.0.1)
    1 --server --port (::1)
    2 --server --port -4
    3 --server --port -6
    5 --server --port --local-interface --local-port succeed


07000 - unix socket specific
    0 happy path
    1 nothing listening on the socket



  part-0000-connect-standard.txt \
  part-0101-ehlo-all.txt \
  part-0200-starttls-basic.txt \
  part-0101-ehlo-all.txt \
  part-1000-mail-basic.txt \
  part-1100-rcpt-basic-accept.txt \
  part-2500-data-accept-basic.txt \
  part-3000-shutdown-accept.txt \

  part-0000-connect-standard.txt \
  part-0001-connect-with-print.txt \
  part-0002-connect-with-print-server-only.txt \
  part-0100-ehlo-basic.txt \
  part-0101-ehlo-all.txt \
  part-0102-ehlo-xclient-fewer.txt \
  part-0103-ehlo-auth-extra.txt \
  part-0104-ehlo-tls-only.txt \
  part-0105-ehlo-post-tls-info.txt \
  part-0200-starttls-basic.txt \
  part-0201-intialize-tls.txt \
  part-0202-tls-reject-starttls.txt \
  part-0210-tls-display-protocol.txt \
  part-0211-tls-display-cipher.txt \
  part-0212-tls-display-peercert.txt \
  part-0213-tls-display-sni.txt \
  part-0300-xclient-basic-accept.txt \
  part-0301-xclient-basic-reject.txt \
  part-0500-prdr-start.txt \
  part-0501-prdr-addr-accept.txt \
  part-0502-prdr-addr-reject.txt \
  part-0600-auth-plain-success.txt \
  part-0601-auth-login-success.txt \
  part-0602-auth-cram-md5-success.txt \
  part-0603-auth-cram-sha1-success.txt \
  part-0605-auth-ntlm-success.txt \
  part-0610-auth-plain-fail.txt \
  part-0611-auth-login-fail.txt \
  part-0612-auth-cram-md5-fail.txt \
  part-0613-auth-cram-sha1-fail.txt \
  part-0615-auth-ntlm-fail.txt \
  part-0800-proxy-read.txt \
  part-1000-mail-basic.txt \
  part-1001-mail-reject.txt \
  part-1010-mail-pipeline-read.txt \
  part-1011-mail-pipeline-respond-success.txt \
  part-1012-mail-pipeline-respond-failure.txt \
  part-1100-rcpt-basic-accept.txt \
  part-1101-rcpt-basic-reject.txt \
  part-1110-rcpt-pipeline-read.txt \
  part-1111-rcpt-pipeline-respond-success.txt \
  part-1112-rcpt-pipeline-respond-failure.txt \
  part-1113-rcpt-pipeline-respond-failure-cascade.txt \
  part-2500-data-accept-basic.txt \
  part-2501-data-accept.txt \
  part-2502-data-read.txt \
  part-2503-data-reject.txt \
  part-2504-data-data-only.txt \
  part-2505-data-message-only.txt \
  part-2510-data-pipeline-data-read.txt \
  part-2511-data-pipeline-data-respond-success.txt \
  part-2512-data-pipeline-data-respond-failure.txt \
  part-2513-data-pipeline-data-respond-failure-cascade.txt \
  part-3000-shutdown-accept.txt \
